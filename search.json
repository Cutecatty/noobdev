[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_cards",
    "section": "",
    "text": "A deck of cards demo of nbdev"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_cards",
    "section": "Install",
    "text": "Install\npip install nbdev-cards\npython has problemn with _"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_cards",
    "section": "How to use",
    "text": "How to use\nthis lib provides a Card class for you to create display and compare cards\n\nCard(1,3)\n\n3♦\n\n\nsuits are numbered accourding to this list\n\nsuits\n\n['♣', '♦', '♥', '♠']"
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card – A basic playing card",
    "section": "",
    "text": "ranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n\n\nthe rank at index 1 (note that there isn’t a playing card at position 0,since we want the ranks to match the indicies where possible.)\nwe will be using numbers to represent playing card club and ranks. these are the suits:\n\nsuits\n\n['♣', '♦', '♥', '♠']\n\n\n\nsource\n\nCard\n\n Card (suit:int, rank:int)\n\nA playing card created from passing a rank from rank and suit from suit\n\n\n\n\nType\nDetails\n\n\n\n\nsuit\nint\nAn index into suits\n\n\nrank\nint\nAn index into ranks\n\n\n\nhere is an example of a card created\n\nc = Card(suit=1,rank=3)\nc\n\n3♦\n\n\n\n## %debug\n\n\ntest_eq(Card(suit=1,rank=3),Card(suit=1,rank=3))"
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 cards, not including jokers\nwhen we initially created the deck, all of the cards will be present\n\ndeck=Deck()\ndeck\n\nA♣;2♣;3♣;4♣;5♣;6♣;7♣;8♣;9♣;10♣;J♣;Q♣;K♣;A♦;2♦;3♦;4♦;5♦;6♦;7♦;8♦;9♦;10♦;J♦;Q♦;K♦;A♥;2♥;3♥;4♥;5♥;6♥;7♥;8♥;9♥;10♥;J♥;Q♥;K♥;A♠;2♠;3♠;4♠;5♠;6♠;7♠;8♠;9♠;10♠;J♠;Q♠;K♠\n\n\nthat should be 52 cards\n\ntest_eq(len(deck),52)\n\n\nCard(1,1) in deck\n\nTrue\n\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nremove and return one card\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nthe index of the card to remove,defaulting to the last one\n\n\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:noobdev.card.Card)\n\nRemoves card from the deck or raise exception if it’s not there\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nCard to remove\n\n\n\n\ndeck=Deck()\ntest_eq(deck.pop(),Card(3,13))\n\nthere are 51 cards left in the deck now.\n\ntest_eq(len(deck),51)\n\n\ncard23=Card(2,3)\ndeck.remove(card23)\nassert card23 not in deck\n\n\nsource\n\n\ndraw_n\n\n draw_n (n:int, replace:bool=True)\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n\nnumber of cards to draw\n\n\nreplace\nbool\nTrue\nwhether or not to draw with replacement\n\n\n\n\ndraw_n(13,replace=False)\n\n[8♠, J♣, 10♥, 5♣, 7♠, K♠, Q♦, 7♦, 5♦, 2♣, 7♥, A♦, 2♠]"
  }
]